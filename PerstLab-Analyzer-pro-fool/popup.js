let statsUpdateInterval;

document.addEventListener('DOMContentLoaded', function() {
  const textarea = document.getElementById('wordsList');
  const saveButton = document.getElementById('saveButton');
  const statsContent = document.getElementById('statsContent');
  const fileInput = document.getElementById('fileInput');
  const colorSelect = document.getElementById('colorSelect');
  const tabs = document.querySelectorAll('.wh-tab');
  const tabContents = document.querySelectorAll('.wh-tab-content');

  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤ –∏ –∏—Ö —Ü–≤–µ—Ç–æ–≤
  let wordColors = {};

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫
  tabs.forEach(tab => {
    tab.addEventListener('click', () => {
      // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
      tabs.forEach(t => t.classList.remove('active'));
      tabContents.forEach(t => t.classList.remove('active'));
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ
      tab.classList.add('active');
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const tabName = tab.getAttribute('data-tab');
      document.getElementById(`${tabName}-tab`).classList.add('active');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É
      if (tabName === 'stats') {
        updateStats();
      }
    });
  });

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏
  function updateWords() {
    const words = textarea.value
      .split('\n')
      .map(word => word.trim())
      .filter(word => word.length > 0);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
    const currentColor = colorSelect.value;
    
    // –ê—Å—Å–æ—Ü–∏–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ü–≤–µ—Ç–æ–º
    words.forEach(word => {
      // –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±–æ—Ä–∞
      wordColors[word] = currentColor;
    });

    chrome.storage.sync.set({ 
      highlightWords: words, 
      wordColors: wordColors 
    }, function() {
      chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
        if (tabs[0]) {
          chrome.tabs.sendMessage(tabs[0].id, {
            type: 'UPDATE_HIGHLIGHTS',
            words: words,
            colors: wordColors
          }, function(response) {
            if (chrome.runtime.lastError) {
              console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', chrome.runtime.lastError);
            } else {
              updateStats();
            }
          });
        }
      });
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  fileInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file && file.type === 'text/plain') {
      const reader = new FileReader();
      reader.onload = function(e) {
        const text = e.target.result;
        textarea.value = text.trim();
        updateWords();
      };
      reader.readAsText(file);
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)');
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function updateStats() {
    chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {
      if (tabs[0]) {
        chrome.tabs.sendMessage(tabs[0].id, {
          type: 'REQUEST_STATS'
        }, function(response) {
          if (chrome.runtime.lastError) {
            console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', chrome.runtime.lastError);
          } else if (response && response.stats) {
            updateStatsDisplay(response.stats, response.locations);
          }
        });
      }
    });
  }

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ª–æ–∫–∞—Ü–∏—è–º–∏
  function updateStatsDisplay(stats, locations = {}) {
    statsContent.innerHTML = '';
    
    const sortedStats = Object.entries(stats)
      .sort(([, a], [, b]) => b - a);
    
    if (sortedStats.length === 0) {
      statsContent.innerHTML = '<div class="stat-item">–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤</div>';
      return;
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏
    function getIconForLocation(location) {
      let icon = '';
      
      if (location.includes('—à–∞–ø–∫–µ')) {
        icon = '‚Üë ';
      } else if (location.includes('–ø–æ–¥–≤–∞–ª–µ')) {
        icon = '‚Üì ';
      } else if (location.includes('—Ç–µ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
        icon = '‚óà ';
      } else if (location.includes('—Ç–µ–≥–µ <a>')) {
        icon = 'üîó ';
      } else if (location.includes('—Å–ø–∏—Å–∫–µ UL')) {
        icon = '‚Ä¢ ';
      } else if (location.includes('—Ç–∞–±–ª–∏—Ü–µ')) {
        icon = '‚ñ¶ ';
      }
      
      return icon;
    }

    for (const [word, count] of sortedStats) {
      const containerDiv = document.createElement('div');
      containerDiv.className = 'stat-item-container';
      
      // –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ
      const mainDiv = document.createElement('div');
      mainDiv.className = 'stat-item';
      mainDiv.innerHTML = `
        <span class="stat-word" title="${word}">${word}</span>
        <span class="stat-count">${count}</span>
      `;
      containerDiv.appendChild(mainDiv);
      
      // –ë–ª–æ–∫ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏
      const locationsDiv = document.createElement('div');
      locationsDiv.className = 'stat-locations';
      
      const wordLocations = locations[word] || {};
      const hasLocations = Object.keys(wordLocations).length > 0;
      
      if (hasLocations) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        const sortedLocations = Object.entries(wordLocations)
          .sort(([, a], [, b]) => b - a);
        
        for (const [location, locCount] of sortedLocations) {
          const locationItem = document.createElement('div');
          locationItem.className = 'location-badge';
          
          const icon = getIconForLocation(location);
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –±–µ–π–¥–∂–∞
          let badgeClass = '';
          if (location.includes('—à–∞–ø–∫–µ')) {
            badgeClass = 'header-loc';
          } else if (location.includes('–ø–æ–¥–≤–∞–ª–µ')) {
            badgeClass = 'footer-loc';
          } else if (location.includes('—Ç–µ–≥–µ <a>')) {
            badgeClass = 'link-loc';
          } else if (location.includes('—Å–ø–∏—Å–∫–µ UL')) {
            badgeClass = 'list-loc';
          } else if (location.includes('—Ç–∞–±–ª–∏—Ü–µ')) {
            badgeClass = 'table-loc';
          } else {
            badgeClass = 'content-loc';
          }
          
          locationItem.classList.add(badgeClass);
          locationItem.innerHTML = `${icon}${location}: <b>${locCount}</b>`;
          locationsDiv.appendChild(locationItem);
        }
      } else {
        locationsDiv.innerHTML = '<div class="location-badge unknown-loc">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</div>';
      }
      
      containerDiv.appendChild(locationsDiv);
      statsContent.appendChild(containerDiv);
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  function startStatsUpdate() {
    updateStats();
    statsUpdateInterval = setInterval(updateStats, 1000);
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
  textarea.addEventListener('input', function() {
    updateWords();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  saveButton.addEventListener('click', updateWords);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
  colorSelect.addEventListener('change', function() {
    updateWords(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å –Ω–æ–≤—ã–º —Ü–≤–µ—Ç–æ–º
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ popup
  chrome.storage.sync.get(['highlightWords', 'wordColors'], function(result) {
    if (result.highlightWords) {
      textarea.value = result.highlightWords.join('\n');
      wordColors = result.wordColors || {};
      updateWords();
    }
  });

  // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  startStatsUpdate();

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ popup
  window.addEventListener('unload', function() {
    if (statsUpdateInterval) {
      clearInterval(statsUpdateInterval);
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  window.addEventListener('error', function(event) {
    console.error('–û—à–∏–±–∫–∞ –≤ popup:', event.error);
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–π)
function updateStatsDisplay(stats, locations = {}) {
  const statsContent = document.getElementById('statsContent');
  if (!statsContent) return;
  
  statsContent.innerHTML = '';
  
  const sortedStats = Object.entries(stats)
    .sort(([, a], [, b]) => b - a);
  
  if (sortedStats.length === 0) {
    statsContent.innerHTML = '<div class="stat-item">–ù–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤</div>';
    return;
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏
  function getIconForLocation(location) {
    let icon = '';
    
    if (location.includes('—à–∞–ø–∫–µ')) {
      icon = '‚Üë ';
    } else if (location.includes('–ø–æ–¥–≤–∞–ª–µ')) {
      icon = '‚Üì ';
    } else if (location.includes('—Ç–µ–ª–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞')) {
      icon = '‚óà ';
    } else if (location.includes('—Ç–µ–≥–µ <a>')) {
      icon = 'üîó ';
    } else if (location.includes('—Å–ø–∏—Å–∫–µ UL')) {
      icon = '‚Ä¢ ';
    } else if (location.includes('—Ç–∞–±–ª–∏—Ü–µ')) {
      icon = '‚ñ¶ ';
    }
    
    return icon;
  }

  for (const [word, count] of sortedStats) {
    const containerDiv = document.createElement('div');
    containerDiv.className = 'stat-item-container';
    
    // –ì–ª–∞–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–æ–≤–µ
    const mainDiv = document.createElement('div');
    mainDiv.className = 'stat-item';
    mainDiv.innerHTML = `
      <span class="stat-word" title="${word}">${word}</span>
      <span class="stat-count">${count}</span>
    `;
    containerDiv.appendChild(mainDiv);
    
    // –ë–ª–æ–∫ —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏
    const locationsDiv = document.createElement('div');
    locationsDiv.className = 'stat-locations';
    
    const wordLocations = locations[word] || {};
    const hasLocations = Object.keys(wordLocations).length > 0;
    
    if (hasLocations) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
      const sortedLocations = Object.entries(wordLocations)
        .sort(([, a], [, b]) => b - a);
      
      for (const [location, locCount] of sortedLocations) {
        const locationItem = document.createElement('div');
        locationItem.className = 'location-badge';
        
        const icon = getIconForLocation(location);
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–ª–∞—Å—Å –¥–ª—è –±–µ–π–¥–∂–∞
        let badgeClass = '';
        if (location.includes('—à–∞–ø–∫–µ')) {
          badgeClass = 'header-loc';
        } else if (location.includes('–ø–æ–¥–≤–∞–ª–µ')) {
          badgeClass = 'footer-loc';
        } else if (location.includes('—Ç–µ–≥–µ <a>')) {
          badgeClass = 'link-loc';
        } else if (location.includes('—Å–ø–∏—Å–∫–µ UL')) {
          badgeClass = 'list-loc';
        } else if (location.includes('—Ç–∞–±–ª–∏—Ü–µ')) {
          badgeClass = 'table-loc';
        } else {
          badgeClass = 'content-loc';
        }
        
        locationItem.classList.add(badgeClass);
        locationItem.innerHTML = `${icon}${location}: <b>${locCount}</b>`;
        locationsDiv.appendChild(locationItem);
      }
    } else {
      locationsDiv.innerHTML = '<div class="location-badge unknown-loc">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ</div>';
    }
    
    containerDiv.appendChild(locationsDiv);
    statsContent.appendChild(containerDiv);
  }
}

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  if (request.type === 'STATS_UPDATE') {
    const statsContent = document.getElementById('statsContent');
    if (statsContent) {
      const stats = request.stats;
      const locations = request.locations || {};
      const tabs = document.querySelectorAll('.wh-tab');
      const activeTab = Array.from(tabs).find(tab => tab.classList.contains('active'));
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      if (activeTab && activeTab.getAttribute('data-tab') === 'stats') {
        updateStatsDisplay(stats, locations);
      }
    }
  }
  return true;
});